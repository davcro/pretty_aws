#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/pretty_aws'
require 'thor'
require 'highline/import'

module PrettyAws
  
  class RdsInstancesController < Thor
    
    default_task :show
    
    desc "update <name>", "update instace"
    method_options :groups => :string, :storage => :string, :class => :string, :delayed => false
    def update(name)
      params = {}
      
      params[:security_groups]=options[:groups] if options[:groups]
      params[:allocated_storage]=options[:storage] if options[:storage]
      params[:instance_class]=options[:class] if options[:class]
      params[:apply_immediately] = (!options[:delayed])
      
      puts "updating #{name} with params:"
      puts YAML.dump(params)
      
      Base.rds.modify_db_instance(name,params)
      
    end
    
    desc "copy <source> <target> --class=<class>", 'copy database from lastest restore time'
    method_option :class, :type => :string, :required => true
    def copy(source, target)
      params={}
      params[:use_latest_restorable_time] = true
      params[:instance_class] = options[:class]
      params[:availability_zone] = 'us-east-1a'
      puts "Copying #{source} as #{target} with class #{options[:class]}"
      Base.rds.restore_db_instance_to_point_in_time(source,target,params)
    end
    
    desc "create", "create instances"
    def create(arg=nil)
      name = ask("What is the database named? (a-z only) ")
      instance_class = choose do |menu|
        menu.prompt = "Select a DB Size:"
        Rds::INSTANCE_CLASSES.each do |class_name|
          menu.choice(class_name)
        end
      end
      storage = ask("How much storage? (gb) ", Integer) { |q| q.in 5..500 }
      username = ask("Username? ")
      password = ask("Password? ") { |q| q.echo = "x" }
      
      puts "creating database with params:"
      p '', 'name', name
      p '', 'class', instance_class
      p '', 'storage', storage
      p '', 'username', username
      p '', 'password', password
      
      Base.rds.create_db_instance(name, instance_class, storage, username, password, :availability_zone => 'us-east-1a')
      Rds.wait_until(name, 'available')
    end
    
    desc "delete <name>", "delete named db"
    def delete(name)
      say("You are about to delete the database: #{name}")
      yes = ask("Are you sure? (yes) ")
      if yes=='yes'
        Base.rds.delete_db_instance(name)
        puts "delete!"
      else
        puts "abort"
      end
    end
    
    desc "console [name]", 'log into mysql console'
    def console(name)
      item = Rds.find(name)
      exec "mysql -u #{item[:master_username]} -h #{item[:endpoint][:address]} -p"
    end
    
    desc "show [name]", 'show instances'
    method_options :verbose => false
    def show(name=nil)
      if name.nil?
        items = Rds.all
      else
        items = [Rds.find(name)]
      end
      if options[:verbose]
        puts YAML.dump(items.map(&:params))
      end
      puts "\n\n"
      items.each do |item|
        p('----->', item[:db_instance_identifier])
        puts ""
        p('', 'status', item[:db_instance_status])

        if item.has_key?(:endpoint) and item[:endpoint].is_a?(Hash) and item[:endpoint].has_key?(:address)
          address = item[:endpoint][:address]
        else
          address = 'nil'
        end
        p('', 'address', address)

        p('', 'size', item[:db_instance_class])

        p('', 'storage', "#{item[:allocated_storage]}G")

        p('', 'zone', item[:availability_zone])

        p('', 'username', item[:master_username])

        p '', 'engine', item[:engine]

        p('', 'security groups', 'name', 'status')
        item[:db_security_groups].each do |group|
          p('', '', group[:db_security_group_name], group[:status])
        end


        p '', 'created at', item[:instance_create_time]  
        p '', 'restorable at', item[:latest_restorable_time]
        p '', 'backup period', item[:backup_retention_period]
        p '', 'backup window', item[:preferred_backup_window]
        p '', 'mod window', item[:preferred_maintenance_window]

        puts "\n\n"
      end
      
      
    end
    
    no_tasks do
      def p(gutter,col1='',col2='',col3='')
        $stdout.printf("%-8s %-20s %-20s %-20s\n",gutter,col1,col2,col3)
      end
      def row(*cols)
        prepend = cols.find { |c| c.is_a?(Hash) and c.has_key?(:prepend) }
        if prepend.nil?
          prepend = ''
        else
          cols.delete(prepend)
          prepend = prepend[:prepend]
        end
        output = [ sprintf("%-8s",prepend) ]
        cols.each do |col|
          output << sprintf("%-20s", col)
        end
        output = output.join(" ") + "\n"
        $stdout.print(output)
      end
    end
  end
  
end

PrettyAws::RdsInstancesController.start